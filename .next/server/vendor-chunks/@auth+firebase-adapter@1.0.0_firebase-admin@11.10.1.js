"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@auth+firebase-adapter@1.0.0_firebase-admin@11.10.1";
exports.ids = ["vendor-chunks/@auth+firebase-adapter@1.0.0_firebase-admin@11.10.1"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/@auth+firebase-adapter@1.0.0_firebase-admin@11.10.1/node_modules/@auth/firebase-adapter/index.js":
/*!*****************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@auth+firebase-adapter@1.0.0_firebase-admin@11.10.1/node_modules/@auth/firebase-adapter/index.js ***!
  \*****************************************************************************************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FirestoreAdapter: () => (/* binding */ FirestoreAdapter),\n/* harmony export */   collectionsFactory: () => (/* binding */ collectionsFactory),\n/* harmony export */   getDoc: () => (/* binding */ getDoc),\n/* harmony export */   getOneDoc: () => (/* binding */ getOneDoc),\n/* harmony export */   initFirestore: () => (/* binding */ initFirestore),\n/* harmony export */   mapFieldsFactory: () => (/* binding */ mapFieldsFactory)\n/* harmony export */ });\n/* harmony import */ var firebase_admin_app__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! firebase-admin/app */ \"firebase-admin/app\");\n/* harmony import */ var firebase_admin_firestore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! firebase-admin/firestore */ \"firebase-admin/firestore\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([firebase_admin_app__WEBPACK_IMPORTED_MODULE_0__, firebase_admin_firestore__WEBPACK_IMPORTED_MODULE_1__]);\n([firebase_admin_app__WEBPACK_IMPORTED_MODULE_0__, firebase_admin_firestore__WEBPACK_IMPORTED_MODULE_1__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n/**\n * <div style={{display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\", padding: 16}}>\n * <span>\n *  Official <b>Firebase</b> adapter for Auth.js / NextAuth.js,\n *  using the <a href=\"https://firebase.google.com/docs/admin/setup\">Firebase Admin SDK</a>\n *  &nbsp;and <a href=\"https://firebase.google.com/docs/firestore\">Firestore</a>.</span>\n * <a href=\"https://firebase.google.com/\">\n *   <img style={{display: \"block\"}} src=\"https://authjs.dev/img/adapters/firebase.svg\" height=\"48\" width=\"48\"/>\n * </a>\n * </div>\n *\n * ## Installation\n *\n * ```bash npm2yarn2pnpm\n * npm install @auth/firebase-adapter firebase-admin\n * ```\n *\n * @module @auth/firebase-adapter\n */ \n\n/**\n * ## Setup\n *\n * First, create a Firebase project and generate a service account key. Visit: `https://console.firebase.google.com/u/0/project/{project-id}/settings/serviceaccounts/adminsdk` (replace `{project-id}` with your project's id)\n *\n * Now you have a few options to authenticate with the Firebase Admin SDK in your app:\n *\n * ### Environment variables\n *  - Download the service account key and save it in your project. (Make sure to add the file to your `.gitignore`!)\n *  - Add [`GOOGLE_APPLICATION_CREDENTIALS`](https://cloud.google.com/docs/authentication/application-default-credentials#GAC) to your environment variables and point it to the service account key file.\n *  - The adapter will automatically pick up the environment variable and use it to authenticate with the Firebase Admin SDK.\n *\n * @example\n * ```ts title=\"pages/api/auth/[...nextauth].ts\"\n * import NextAuth from \"next-auth\"\n * import { FirestoreAdapter } from \"@auth/firebase-adapter\"\n *\n * export default NextAuth({\n *   adapter: FirestoreAdapter(),\n *   // ...\n * })\n * ```\n *\n * ### Service account values\n *\n * - Download the service account key to a temporary location. (Make sure to not commit this file to your repository!)\n * - Add the following environment variables to your project: `FIREBASE_PROJECT_ID`, `FIREBASE_CLIENT_EMAIL`, `FIREBASE_PRIVATE_KEY`.\n * - Pass the config to the adapter, using the environment variables as shown in the example below.\n *\n * @example\n * ```ts title=\"pages/api/auth/[...nextauth].ts\"\n * import NextAuth from \"next-auth\"\n * import { FirestoreAdapter } from \"@auth/firebase-adapter\"\n * import { cert } from \"firebase-admin/app\"\n *\n * export default NextAuth({\n *  adapter: FirestoreAdapter({\n *    credential: cert({\n *      projectId: process.env.FIREBASE_PROJECT_ID,\n *      clientEmail: process.env.FIREBASE_CLIENT_EMAIL,\n *      privateKey: process.env.FIREBASE_PRIVATE_KEY,\n *    })\n *  })\n *  // ...\n * })\n * ```\n *\n * ### Using an existing Firestore instance\n *\n * If you already have a Firestore instance, you can pass that to the adapter directly instead.\n *\n * :::note\n * When passing an instance and in a serverless environment, remember to handle duplicate app initialization.\n * :::\n *\n * :::tip\n * You can use the {@link initFirestore} utility to initialize the app and get an instance safely.\n * :::\n *\n * @example\n * ```ts title=\"pages/api/auth/[...nextauth].ts\"\n * import NextAuth from \"next-auth\"\n * import { FirestoreAdapter } from \"@auth/firebase-adapter\"\n * import { firestore } from \"lib/firestore\"\n *\n * export default NextAuth({\n *  adapter: FirestoreAdapter(firestore),\n *  // ...\n * })\n * ```\n */ function FirestoreAdapter(config) {\n    const { db, namingStrategy = \"default\" } = config instanceof firebase_admin_firestore__WEBPACK_IMPORTED_MODULE_1__.Firestore ? {\n        db: config\n    } : {\n        ...config,\n        db: config?.firestore ?? initFirestore(config)\n    };\n    const preferSnakeCase = namingStrategy === \"snake_case\";\n    const C = collectionsFactory(db, preferSnakeCase);\n    const mapper = mapFieldsFactory(preferSnakeCase);\n    return {\n        async createUser (userInit) {\n            const { id: userId } = await C.users.add(userInit);\n            const user = await getDoc(C.users.doc(userId));\n            if (!user) throw new Error(\"[createUser] Failed to fetch created user\");\n            return user;\n        },\n        async getUser (id) {\n            return await getDoc(C.users.doc(id));\n        },\n        async getUserByEmail (email) {\n            return await getOneDoc(C.users.where(\"email\", \"==\", email));\n        },\n        async getUserByAccount ({ provider, providerAccountId }) {\n            const account = await getOneDoc(C.accounts.where(\"provider\", \"==\", provider).where(mapper.toDb(\"providerAccountId\"), \"==\", providerAccountId));\n            if (!account) return null;\n            return await getDoc(C.users.doc(account.userId));\n        },\n        async updateUser (partialUser) {\n            if (!partialUser.id) throw new Error(\"[updateUser] Missing id\");\n            const userRef = C.users.doc(partialUser.id);\n            await userRef.set(partialUser, {\n                merge: true\n            });\n            const user = await getDoc(userRef);\n            if (!user) throw new Error(\"[updateUser] Failed to fetch updated user\");\n            return user;\n        },\n        async deleteUser (userId) {\n            await db.runTransaction(async (transaction)=>{\n                const accounts = await C.accounts.where(mapper.toDb(\"userId\"), \"==\", userId).get();\n                const sessions = await C.sessions.where(mapper.toDb(\"userId\"), \"==\", userId).get();\n                transaction.delete(C.users.doc(userId));\n                accounts.forEach((account)=>transaction.delete(account.ref));\n                sessions.forEach((session)=>transaction.delete(session.ref));\n            });\n        },\n        async linkAccount (accountInit) {\n            const ref = await C.accounts.add(accountInit);\n            const account = await ref.get().then((doc)=>doc.data());\n            return account ?? null;\n        },\n        async unlinkAccount ({ provider, providerAccountId }) {\n            await deleteDocs(C.accounts.where(\"provider\", \"==\", provider).where(mapper.toDb(\"providerAccountId\"), \"==\", providerAccountId).limit(1));\n        },\n        async createSession (sessionInit) {\n            const ref = await C.sessions.add(sessionInit);\n            const session = await ref.get().then((doc)=>doc.data());\n            if (session) return session ?? null;\n            throw new Error(\"[createSession] Failed to fetch created session\");\n        },\n        async getSessionAndUser (sessionToken) {\n            const session = await getOneDoc(C.sessions.where(mapper.toDb(\"sessionToken\"), \"==\", sessionToken));\n            if (!session) return null;\n            const user = await getDoc(C.users.doc(session.userId));\n            if (!user) return null;\n            return {\n                session,\n                user\n            };\n        },\n        async updateSession (partialSession) {\n            const sessionId = await db.runTransaction(async (transaction)=>{\n                const sessionSnapshot = (await transaction.get(C.sessions.where(mapper.toDb(\"sessionToken\"), \"==\", partialSession.sessionToken).limit(1))).docs[0];\n                if (!sessionSnapshot?.exists) return null;\n                transaction.set(sessionSnapshot.ref, partialSession, {\n                    merge: true\n                });\n                return sessionSnapshot.id;\n            });\n            if (!sessionId) return null;\n            const session = await getDoc(C.sessions.doc(sessionId));\n            if (session) return session;\n            throw new Error(\"[updateSession] Failed to fetch updated session\");\n        },\n        async deleteSession (sessionToken) {\n            await deleteDocs(C.sessions.where(mapper.toDb(\"sessionToken\"), \"==\", sessionToken).limit(1));\n        },\n        async createVerificationToken (verificationToken) {\n            await C.verification_tokens.add(verificationToken);\n            return verificationToken;\n        },\n        async useVerificationToken ({ identifier, token }) {\n            const verificationTokenSnapshot = (await C.verification_tokens.where(\"identifier\", \"==\", identifier).where(\"token\", \"==\", token).limit(1).get()).docs[0];\n            if (!verificationTokenSnapshot) return null;\n            const data = verificationTokenSnapshot.data();\n            await verificationTokenSnapshot.ref.delete();\n            return data;\n        }\n    };\n}\n// for consistency, store all fields as snake_case in the database\nconst MAP_TO_FIRESTORE = {\n    userId: \"user_id\",\n    sessionToken: \"session_token\",\n    providerAccountId: \"provider_account_id\",\n    emailVerified: \"email_verified\"\n};\nconst MAP_FROM_FIRESTORE = {};\nfor(const key in MAP_TO_FIRESTORE){\n    MAP_FROM_FIRESTORE[MAP_TO_FIRESTORE[key]] = key;\n}\nconst identity = (x)=>x;\n/** @internal */ function mapFieldsFactory(preferSnakeCase) {\n    if (preferSnakeCase) {\n        return {\n            toDb: (field)=>MAP_TO_FIRESTORE[field] ?? field,\n            fromDb: (field)=>MAP_FROM_FIRESTORE[field] ?? field\n        };\n    }\n    return {\n        toDb: identity,\n        fromDb: identity\n    };\n}\n/** @internal */ function getConverter(options) {\n    const mapper = mapFieldsFactory(options?.preferSnakeCase ?? false);\n    return {\n        toFirestore (object) {\n            const document = {};\n            for(const key in object){\n                if (key === \"id\") continue;\n                const value = object[key];\n                if (value !== undefined) {\n                    document[mapper.toDb(key)] = value;\n                } else {\n                    console.warn(`FirebaseAdapter: value for key \"${key}\" is undefined`);\n                }\n            }\n            return document;\n        },\n        fromFirestore (snapshot) {\n            const document = snapshot.data(); // we can guarantee it exists\n            const object = {};\n            if (!options?.excludeId) {\n                object.id = snapshot.id;\n            }\n            for(const key in document){\n                let value = document[key];\n                if (value instanceof firebase_admin_firestore__WEBPACK_IMPORTED_MODULE_1__.Timestamp) value = value.toDate();\n                object[mapper.fromDb(key)] = value;\n            }\n            return object;\n        }\n    };\n}\n/** @internal */ async function getOneDoc(querySnapshot) {\n    const querySnap = await querySnapshot.limit(1).get();\n    return querySnap.docs[0]?.data() ?? null;\n}\n/** @internal */ async function deleteDocs(querySnapshot) {\n    const querySnap = await querySnapshot.get();\n    for (const doc of querySnap.docs){\n        await doc.ref.delete();\n    }\n}\n/** @internal */ async function getDoc(docRef) {\n    const docSnap = await docRef.get();\n    return docSnap.data() ?? null;\n}\n/** @internal */ function collectionsFactory(db, preferSnakeCase = false) {\n    return {\n        users: db.collection(\"users\").withConverter(getConverter({\n            preferSnakeCase\n        })),\n        sessions: db.collection(\"sessions\").withConverter(getConverter({\n            preferSnakeCase\n        })),\n        accounts: db.collection(\"accounts\").withConverter(getConverter({\n            preferSnakeCase\n        })),\n        verification_tokens: db.collection(preferSnakeCase ? \"verification_tokens\" : \"verificationTokens\").withConverter(getConverter({\n            preferSnakeCase,\n            excludeId: true\n        }))\n    };\n}\n/**\n * Utility function that helps making sure that there is no duplicate app initialization issues in serverless environments.\n * If no parameter is passed, it will use the `GOOGLE_APPLICATION_CREDENTIALS` environment variable to initialize a Firestore instance.\n *\n * @example\n * ```ts title=\"lib/firestore.ts\"\n * import { initFirestore } from \"@auth/firebase-adapter\"\n * import { cert } from \"firebase-admin/app\"\n *\n * export const firestore = initFirestore({\n *  credential: cert({\n *    projectId: process.env.FIREBASE_PROJECT_ID,\n *    clientEmail: process.env.FIREBASE_CLIENT_EMAIL,\n *    privateKey: process.env.FIREBASE_PRIVATE_KEY,\n *  })\n * })\n * ```\n */ function initFirestore(options = {}) {\n    const apps = (0,firebase_admin_app__WEBPACK_IMPORTED_MODULE_0__.getApps)();\n    const app = options.name ? apps.find((a)=>a.name === options.name) : apps[0];\n    if (app) return (0,firebase_admin_firestore__WEBPACK_IMPORTED_MODULE_1__.getFirestore)(app);\n    return (0,firebase_admin_firestore__WEBPACK_IMPORTED_MODULE_1__.initializeFirestore)((0,firebase_admin_app__WEBPACK_IMPORTED_MODULE_0__.initializeApp)(options, options.name));\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@auth+firebase-adapter@1.0.0_firebase-admin@11.10.1/node_modules/@auth/firebase-adapter/index.js\n");

/***/ })

};
;